/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/communities": {
    get: {
      parameters: {
        query: {
          /** test */
          id?: parameters["rowFilter.communities.id"];
          created_at?: parameters["rowFilter.communities.created_at"];
          /** name attribute */
          name?: parameters["rowFilter.communities.name"];
          slug?: parameters["rowFilter.communities.slug"];
          description?: parameters["rowFilter.communities.description"];
          status?: parameters["rowFilter.communities.status"];
          image?: parameters["rowFilter.communities.image"];
          updated_at?: parameters["rowFilter.communities.updated_at"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["communities"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** communities */
          communities?: definitions["communities"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          /** test */
          id?: parameters["rowFilter.communities.id"];
          created_at?: parameters["rowFilter.communities.created_at"];
          /** name attribute */
          name?: parameters["rowFilter.communities.name"];
          slug?: parameters["rowFilter.communities.slug"];
          description?: parameters["rowFilter.communities.description"];
          status?: parameters["rowFilter.communities.status"];
          image?: parameters["rowFilter.communities.image"];
          updated_at?: parameters["rowFilter.communities.updated_at"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          /** test */
          id?: parameters["rowFilter.communities.id"];
          created_at?: parameters["rowFilter.communities.created_at"];
          /** name attribute */
          name?: parameters["rowFilter.communities.name"];
          slug?: parameters["rowFilter.communities.slug"];
          description?: parameters["rowFilter.communities.description"];
          status?: parameters["rowFilter.communities.status"];
          image?: parameters["rowFilter.communities.image"];
          updated_at?: parameters["rowFilter.communities.updated_at"];
        };
        body: {
          /** communities */
          communities?: definitions["communities"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/community_user": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.community_user.id"];
          created_at?: parameters["rowFilter.community_user.created_at"];
          user_id?: parameters["rowFilter.community_user.user_id"];
          community_id?: parameters["rowFilter.community_user.community_id"];
          role?: parameters["rowFilter.community_user.role"];
          updated_at?: parameters["rowFilter.community_user.updated_at"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["community_user"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** community_user */
          community_user?: definitions["community_user"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.community_user.id"];
          created_at?: parameters["rowFilter.community_user.created_at"];
          user_id?: parameters["rowFilter.community_user.user_id"];
          community_id?: parameters["rowFilter.community_user.community_id"];
          role?: parameters["rowFilter.community_user.role"];
          updated_at?: parameters["rowFilter.community_user.updated_at"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.community_user.id"];
          created_at?: parameters["rowFilter.community_user.created_at"];
          user_id?: parameters["rowFilter.community_user.user_id"];
          community_id?: parameters["rowFilter.community_user.community_id"];
          role?: parameters["rowFilter.community_user.role"];
          updated_at?: parameters["rowFilter.community_user.updated_at"];
        };
        body: {
          /** community_user */
          community_user?: definitions["community_user"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/countries": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.countries.id"];
          /** Full country name. */
          name?: parameters["rowFilter.countries.name"];
          /** ISO 3166-1 alpha-2 code. */
          iso2?: parameters["rowFilter.countries.iso2"];
          /** ISO 3166-1 alpha-3 code. */
          iso3?: parameters["rowFilter.countries.iso3"];
          /** Local variation of the name. */
          local_name?: parameters["rowFilter.countries.local_name"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["countries"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** countries */
          countries?: definitions["countries"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.countries.id"];
          /** Full country name. */
          name?: parameters["rowFilter.countries.name"];
          /** ISO 3166-1 alpha-2 code. */
          iso2?: parameters["rowFilter.countries.iso2"];
          /** ISO 3166-1 alpha-3 code. */
          iso3?: parameters["rowFilter.countries.iso3"];
          /** Local variation of the name. */
          local_name?: parameters["rowFilter.countries.local_name"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.countries.id"];
          /** Full country name. */
          name?: parameters["rowFilter.countries.name"];
          /** ISO 3166-1 alpha-2 code. */
          iso2?: parameters["rowFilter.countries.iso2"];
          /** ISO 3166-1 alpha-3 code. */
          iso3?: parameters["rowFilter.countries.iso3"];
          /** Local variation of the name. */
          local_name?: parameters["rowFilter.countries.local_name"];
        };
        body: {
          /** countries */
          countries?: definitions["countries"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/events": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.events.id"];
          created_at?: parameters["rowFilter.events.created_at"];
          name?: parameters["rowFilter.events.name"];
          city?: parameters["rowFilter.events.city"];
          country?: parameters["rowFilter.events.country"];
          start_date?: parameters["rowFilter.events.start_date"];
          end_date?: parameters["rowFilter.events.end_date"];
          description?: parameters["rowFilter.events.description"];
          community_id?: parameters["rowFilter.events.community_id"];
          address?: parameters["rowFilter.events.address"];
          map_link?: parameters["rowFilter.events.map_link"];
          status?: parameters["rowFilter.events.status"];
          image_link?: parameters["rowFilter.events.image_link"];
          updated_at?: parameters["rowFilter.events.updated_at"];
          slug?: parameters["rowFilter.events.slug"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["events"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** events */
          events?: definitions["events"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.events.id"];
          created_at?: parameters["rowFilter.events.created_at"];
          name?: parameters["rowFilter.events.name"];
          city?: parameters["rowFilter.events.city"];
          country?: parameters["rowFilter.events.country"];
          start_date?: parameters["rowFilter.events.start_date"];
          end_date?: parameters["rowFilter.events.end_date"];
          description?: parameters["rowFilter.events.description"];
          community_id?: parameters["rowFilter.events.community_id"];
          address?: parameters["rowFilter.events.address"];
          map_link?: parameters["rowFilter.events.map_link"];
          status?: parameters["rowFilter.events.status"];
          image_link?: parameters["rowFilter.events.image_link"];
          updated_at?: parameters["rowFilter.events.updated_at"];
          slug?: parameters["rowFilter.events.slug"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.events.id"];
          created_at?: parameters["rowFilter.events.created_at"];
          name?: parameters["rowFilter.events.name"];
          city?: parameters["rowFilter.events.city"];
          country?: parameters["rowFilter.events.country"];
          start_date?: parameters["rowFilter.events.start_date"];
          end_date?: parameters["rowFilter.events.end_date"];
          description?: parameters["rowFilter.events.description"];
          community_id?: parameters["rowFilter.events.community_id"];
          address?: parameters["rowFilter.events.address"];
          map_link?: parameters["rowFilter.events.map_link"];
          status?: parameters["rowFilter.events.status"];
          image_link?: parameters["rowFilter.events.image_link"];
          updated_at?: parameters["rowFilter.events.updated_at"];
          slug?: parameters["rowFilter.events.slug"];
        };
        body: {
          /** events */
          events?: definitions["events"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/mercadolibre_api_urls": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.mercadolibre_api_urls.id"];
          created_at?: parameters["rowFilter.mercadolibre_api_urls.created_at"];
          environment?:
            parameters["rowFilter.mercadolibre_api_urls.environment"];
          mercadolibre_worker_host?: parameters[
            "rowFilter.mercadolibre_api_urls.mercadolibre_worker_host"
          ];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["mercadolibre_api_urls"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** mercadolibre_api_urls */
          mercadolibre_api_urls?: definitions["mercadolibre_api_urls"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.mercadolibre_api_urls.id"];
          created_at?: parameters["rowFilter.mercadolibre_api_urls.created_at"];
          environment?:
            parameters["rowFilter.mercadolibre_api_urls.environment"];
          mercadolibre_worker_host?: parameters[
            "rowFilter.mercadolibre_api_urls.mercadolibre_worker_host"
          ];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.mercadolibre_api_urls.id"];
          created_at?: parameters["rowFilter.mercadolibre_api_urls.created_at"];
          environment?:
            parameters["rowFilter.mercadolibre_api_urls.environment"];
          mercadolibre_worker_host?: parameters[
            "rowFilter.mercadolibre_api_urls.mercadolibre_worker_host"
          ];
        };
        body: {
          /** mercadolibre_api_urls */
          mercadolibre_api_urls?: definitions["mercadolibre_api_urls"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/super_admins": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.super_admins.id"];
          created_at?: parameters["rowFilter.super_admins.created_at"];
          user_id?: parameters["rowFilter.super_admins.user_id"];
          updated_at?: parameters["rowFilter.super_admins.updated_at"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["super_admins"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** super_admins */
          super_admins?: definitions["super_admins"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.super_admins.id"];
          created_at?: parameters["rowFilter.super_admins.created_at"];
          user_id?: parameters["rowFilter.super_admins.user_id"];
          updated_at?: parameters["rowFilter.super_admins.updated_at"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.super_admins.id"];
          created_at?: parameters["rowFilter.super_admins.created_at"];
          user_id?: parameters["rowFilter.super_admins.user_id"];
          updated_at?: parameters["rowFilter.super_admins.updated_at"];
        };
        body: {
          /** super_admins */
          super_admins?: definitions["super_admins"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/ticket_template": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.ticket_template.id"];
          created_at?: parameters["rowFilter.ticket_template.created_at"];
          price?: parameters["rowFilter.ticket_template.price"];
          name?: parameters["rowFilter.ticket_template.name"];
          description?: parameters["rowFilter.ticket_template.description"];
          status?: parameters["rowFilter.ticket_template.status"];
          quantity?: parameters["rowFilter.ticket_template.quantity"];
          event_id?: parameters["rowFilter.ticket_template.event_id"];
          updated_at?: parameters["rowFilter.ticket_template.updated_at"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["ticket_template"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** ticket_template */
          ticket_template?: definitions["ticket_template"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.ticket_template.id"];
          created_at?: parameters["rowFilter.ticket_template.created_at"];
          price?: parameters["rowFilter.ticket_template.price"];
          name?: parameters["rowFilter.ticket_template.name"];
          description?: parameters["rowFilter.ticket_template.description"];
          status?: parameters["rowFilter.ticket_template.status"];
          quantity?: parameters["rowFilter.ticket_template.quantity"];
          event_id?: parameters["rowFilter.ticket_template.event_id"];
          updated_at?: parameters["rowFilter.ticket_template.updated_at"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.ticket_template.id"];
          created_at?: parameters["rowFilter.ticket_template.created_at"];
          price?: parameters["rowFilter.ticket_template.price"];
          name?: parameters["rowFilter.ticket_template.name"];
          description?: parameters["rowFilter.ticket_template.description"];
          status?: parameters["rowFilter.ticket_template.status"];
          quantity?: parameters["rowFilter.ticket_template.quantity"];
          event_id?: parameters["rowFilter.ticket_template.event_id"];
          updated_at?: parameters["rowFilter.ticket_template.updated_at"];
        };
        body: {
          /** ticket_template */
          ticket_template?: definitions["ticket_template"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/ticket_transactions": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.ticket_transactions.id"];
          created_at?: parameters["rowFilter.ticket_transactions.created_at"];
          ticket_template_id?:
            parameters["rowFilter.ticket_transactions.ticket_template_id"];
          status?: parameters["rowFilter.ticket_transactions.status"];
          user_id?: parameters["rowFilter.ticket_transactions.user_id"];
          updated_at?: parameters["rowFilter.ticket_transactions.updated_at"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["ticket_transactions"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** ticket_transactions */
          ticket_transactions?: definitions["ticket_transactions"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.ticket_transactions.id"];
          created_at?: parameters["rowFilter.ticket_transactions.created_at"];
          ticket_template_id?:
            parameters["rowFilter.ticket_transactions.ticket_template_id"];
          status?: parameters["rowFilter.ticket_transactions.status"];
          user_id?: parameters["rowFilter.ticket_transactions.user_id"];
          updated_at?: parameters["rowFilter.ticket_transactions.updated_at"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.ticket_transactions.id"];
          created_at?: parameters["rowFilter.ticket_transactions.created_at"];
          ticket_template_id?:
            parameters["rowFilter.ticket_transactions.ticket_template_id"];
          status?: parameters["rowFilter.ticket_transactions.status"];
          user_id?: parameters["rowFilter.ticket_transactions.user_id"];
          updated_at?: parameters["rowFilter.ticket_transactions.updated_at"];
        };
        body: {
          /** ticket_transactions */
          ticket_transactions?: definitions["ticket_transactions"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/transactions": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.transactions.id"];
          created_at?: parameters["rowFilter.transactions.created_at"];
          event_id?: parameters["rowFilter.transactions.event_id"];
          /** User that generated the transaction */
          user_id?: parameters["rowFilter.transactions.user_id"];
          /** Not to be sent. This will be generated by MELI_API after a preference is created */
          preference_json?:
            parameters["rowFilter.transactions.preference_json"];
          /** A stringified array of ticket ids and their amounts */
          ticket_json_stringified?:
            parameters["rowFilter.transactions.ticket_json_stringified"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["transactions"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** transactions */
          transactions?: definitions["transactions"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.transactions.id"];
          created_at?: parameters["rowFilter.transactions.created_at"];
          event_id?: parameters["rowFilter.transactions.event_id"];
          /** User that generated the transaction */
          user_id?: parameters["rowFilter.transactions.user_id"];
          /** Not to be sent. This will be generated by MELI_API after a preference is created */
          preference_json?:
            parameters["rowFilter.transactions.preference_json"];
          /** A stringified array of ticket ids and their amounts */
          ticket_json_stringified?:
            parameters["rowFilter.transactions.ticket_json_stringified"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.transactions.id"];
          created_at?: parameters["rowFilter.transactions.created_at"];
          event_id?: parameters["rowFilter.transactions.event_id"];
          /** User that generated the transaction */
          user_id?: parameters["rowFilter.transactions.user_id"];
          /** Not to be sent. This will be generated by MELI_API after a preference is created */
          preference_json?:
            parameters["rowFilter.transactions.preference_json"];
          /** A stringified array of ticket ids and their amounts */
          ticket_json_stringified?:
            parameters["rowFilter.transactions.ticket_json_stringified"];
        };
        body: {
          /** transactions */
          transactions?: definitions["transactions"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/rpc/get_communities": {
    post: {
      parameters: {
        body: {
          args: { [key: string]: unknown };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
}

export interface definitions {
  /** @description developer-communities */
  communities: {
    /**
     * Format: uuid
     * @description test
     *
     * Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /**
     * Format: character varying
     * @description name attribute
     */
    name: string;
    /** Format: character varying */
    slug: string;
    /** Format: character varying */
    description: string;
    /**
     * Format: public.community_status
     * @default DRAFT
     * @enum {string}
     */
    status: "ACTIVE" | "INACTIVE" | "DRAFT";
    /** Format: character varying */
    image?: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    updated_at: string;
  };
  community_user: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /** Format: uuid */
    user_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `communities.id`.<fk table='communities' column='id'/>
     */
    community_id: string;
    /**
     * Format: public.community_user_roles
     * @enum {string}
     */
    role: "OWNER" | "ADMIN" | "VOLUNTEER" | "COLLABORATOR";
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    updated_at: string;
  };
  /** @description Full list of countries. */
  countries: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: text
     * @description Full country name.
     */
    name?: string;
    /**
     * Format: text
     * @description ISO 3166-1 alpha-2 code.
     */
    iso2: string;
    /**
     * Format: text
     * @description ISO 3166-1 alpha-3 code.
     */
    iso3?: string;
    /**
     * Format: text
     * @description Local variation of the name.
     */
    local_name?: string;
  };
  events: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /** Format: character varying */
    name: string;
    /**
     * Format: character varying
     * @default
     */
    city?: string;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `countries.id`.<fk table='countries' column='id'/>
     */
    country?: number;
    /** Format: timestamp with time zone */
    start_date: string;
    /** Format: timestamp with time zone */
    end_date: string;
    /**
     * Format: character varying
     * @default
     */
    description: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `communities.id`.<fk table='communities' column='id'/>
     */
    community_id: string;
    /**
     * Format: text
     * @default
     */
    address?: string;
    /**
     * Format: text
     * @default
     */
    map_link?: string;
    /**
     * Format: public.event_status
     * @default DRAFT
     * @enum {string}
     */
    status?: "ACTIVE" | "INACTIVE" | "DRAFT";
    /**
     * Format: text
     * @default
     */
    image_link: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    updated_at: string;
    /**
     * Format: text
     * @default
     */
    slug: string;
  };
  mercadolibre_api_urls: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /** Format: text */
    environment: string;
    /** Format: text */
    mercadolibre_worker_host: string;
  };
  super_admins: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /** Format: uuid */
    user_id: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    updated_at: string;
  };
  ticket_template: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at: string;
    /** Format: numeric */
    price: number;
    /** Format: text */
    name: string;
    /** Format: text */
    description?: string;
    /**
     * Format: public.ticket_template_status
     * @default DRAFT
     * @enum {string}
     */
    status: "ACTIVE" | "INACTIVE" | "DRAFT";
    /** Format: numeric */
    quantity: number;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `events.id`.<fk table='events' column='id'/>
     */
    event_id: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    updated_at: string;
  };
  ticket_transactions: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `ticket_template.id`.<fk table='ticket_template' column='id'/>
     * @default ec353ea3-e014-480f-9f8e-33a625038638
     */
    ticket_template_id: string;
    /**
     * Format: public.ticket_transaction_status
     * @enum {string}
     */
    status: "GENERATED" | "REJECTED" | "ASSIGNED";
    /**
     * Format: uuid
     * @default 9217c0bc-3e2e-4c9d-b899-ef92d57b814d
     */
    user_id: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    updated_at: string;
  };
  /** @description Where we'll store the transactions and their states (A collection of tickets and their current payment status) */
  transactions: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `events.id`.<fk table='events' column='id'/>
     */
    event_id: string;
    /**
     * Format: uuid
     * @description User that generated the transaction
     * @default auth.uid()
     */
    user_id: string;
    /**
     * Format: text
     * @description Not to be sent. This will be generated by MELI_API after a preference is created
     */
    preference_json?: string;
    /**
     * Format: text
     * @description A stringified array of ticket ids and their amounts
     */
    ticket_json_stringified: string;
  };
}

export interface parameters {
  /**
   * @description Preference
   * @enum {string}
   */
  preferParams: "params=single-object";
  /**
   * @description Preference
   * @enum {string}
   */
  preferReturn: "return=representation" | "return=minimal" | "return=none";
  /**
   * @description Preference
   * @enum {string}
   */
  preferCount: "count=none";
  /** @description Filtering Columns */
  select: string;
  /** @description On Conflict */
  on_conflict: string;
  /** @description Ordering */
  order: string;
  /** @description Limiting and Pagination */
  range: string;
  /**
   * @description Limiting and Pagination
   * @default items
   */
  rangeUnit: string;
  /** @description Limiting and Pagination */
  offset: string;
  /** @description Limiting and Pagination */
  limit: string;
  /** @description communities */
  "body.communities": definitions["communities"];
  /**
   * Format: uuid
   * @description test
   */
  "rowFilter.communities.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.communities.created_at": string;
  /**
   * Format: character varying
   * @description name attribute
   */
  "rowFilter.communities.name": string;
  /** Format: character varying */
  "rowFilter.communities.slug": string;
  /** Format: character varying */
  "rowFilter.communities.description": string;
  /** Format: public.community_status */
  "rowFilter.communities.status": string;
  /** Format: character varying */
  "rowFilter.communities.image": string;
  /** Format: timestamp with time zone */
  "rowFilter.communities.updated_at": string;
  /** @description community_user */
  "body.community_user": definitions["community_user"];
  /** Format: uuid */
  "rowFilter.community_user.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.community_user.created_at": string;
  /** Format: uuid */
  "rowFilter.community_user.user_id": string;
  /** Format: uuid */
  "rowFilter.community_user.community_id": string;
  /** Format: public.community_user_roles */
  "rowFilter.community_user.role": string;
  /** Format: timestamp with time zone */
  "rowFilter.community_user.updated_at": string;
  /** @description countries */
  "body.countries": definitions["countries"];
  /** Format: bigint */
  "rowFilter.countries.id": string;
  /**
   * Format: text
   * @description Full country name.
   */
  "rowFilter.countries.name": string;
  /**
   * Format: text
   * @description ISO 3166-1 alpha-2 code.
   */
  "rowFilter.countries.iso2": string;
  /**
   * Format: text
   * @description ISO 3166-1 alpha-3 code.
   */
  "rowFilter.countries.iso3": string;
  /**
   * Format: text
   * @description Local variation of the name.
   */
  "rowFilter.countries.local_name": string;
  /** @description events */
  "body.events": definitions["events"];
  /** Format: uuid */
  "rowFilter.events.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.events.created_at": string;
  /** Format: character varying */
  "rowFilter.events.name": string;
  /** Format: character varying */
  "rowFilter.events.city": string;
  /** Format: bigint */
  "rowFilter.events.country": string;
  /** Format: timestamp with time zone */
  "rowFilter.events.start_date": string;
  /** Format: timestamp with time zone */
  "rowFilter.events.end_date": string;
  /** Format: character varying */
  "rowFilter.events.description": string;
  /** Format: uuid */
  "rowFilter.events.community_id": string;
  /** Format: text */
  "rowFilter.events.address": string;
  /** Format: text */
  "rowFilter.events.map_link": string;
  /** Format: public.event_status */
  "rowFilter.events.status": string;
  /** Format: text */
  "rowFilter.events.image_link": string;
  /** Format: timestamp with time zone */
  "rowFilter.events.updated_at": string;
  /** Format: text */
  "rowFilter.events.slug": string;
  /** @description mercadolibre_api_urls */
  "body.mercadolibre_api_urls": definitions["mercadolibre_api_urls"];
  /** Format: uuid */
  "rowFilter.mercadolibre_api_urls.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.mercadolibre_api_urls.created_at": string;
  /** Format: text */
  "rowFilter.mercadolibre_api_urls.environment": string;
  /** Format: text */
  "rowFilter.mercadolibre_api_urls.mercadolibre_worker_host": string;
  /** @description super_admins */
  "body.super_admins": definitions["super_admins"];
  /** Format: uuid */
  "rowFilter.super_admins.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.super_admins.created_at": string;
  /** Format: uuid */
  "rowFilter.super_admins.user_id": string;
  /** Format: timestamp with time zone */
  "rowFilter.super_admins.updated_at": string;
  /** @description ticket_template */
  "body.ticket_template": definitions["ticket_template"];
  /** Format: uuid */
  "rowFilter.ticket_template.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.ticket_template.created_at": string;
  /** Format: numeric */
  "rowFilter.ticket_template.price": string;
  /** Format: text */
  "rowFilter.ticket_template.name": string;
  /** Format: text */
  "rowFilter.ticket_template.description": string;
  /** Format: public.ticket_template_status */
  "rowFilter.ticket_template.status": string;
  /** Format: numeric */
  "rowFilter.ticket_template.quantity": string;
  /** Format: uuid */
  "rowFilter.ticket_template.event_id": string;
  /** Format: timestamp with time zone */
  "rowFilter.ticket_template.updated_at": string;
  /** @description ticket_transactions */
  "body.ticket_transactions": definitions["ticket_transactions"];
  /** Format: uuid */
  "rowFilter.ticket_transactions.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.ticket_transactions.created_at": string;
  /** Format: uuid */
  "rowFilter.ticket_transactions.ticket_template_id": string;
  /** Format: public.ticket_transaction_status */
  "rowFilter.ticket_transactions.status": string;
  /** Format: uuid */
  "rowFilter.ticket_transactions.user_id": string;
  /** Format: timestamp with time zone */
  "rowFilter.ticket_transactions.updated_at": string;
  /** @description transactions */
  "body.transactions": definitions["transactions"];
  /** Format: uuid */
  "rowFilter.transactions.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.transactions.created_at": string;
  /** Format: uuid */
  "rowFilter.transactions.event_id": string;
  /**
   * Format: uuid
   * @description User that generated the transaction
   */
  "rowFilter.transactions.user_id": string;
  /**
   * Format: text
   * @description Not to be sent. This will be generated by MELI_API after a preference is created
   */
  "rowFilter.transactions.preference_json": string;
  /**
   * Format: text
   * @description A stringified array of ticket ids and their amounts
   */
  "rowFilter.transactions.ticket_json_stringified": string;
}

export interface operations {}

export interface external {}
