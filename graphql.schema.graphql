"""Marks an element of a GraphQL schema as no longer supported."""
directive @deprecated(
  """
  Explains why this element was deprecated, usually also including a suggestion for how to access supported similar data. Formatted using the Markdown syntax, as specified by [CommonMark](https://commonmark.org/).
  """
  reason: String = "No longer supported"
) on ARGUMENT_DEFINITION | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION

"""
Directs the executor to include this field or fragment only when the `if` argument is true.
"""
directive @include(
  """Included when true."""
  if: Boolean!
) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"""
Directs the executor to skip this field or fragment when the `if` argument is true.
"""
directive @skip(
  """Skipped when true."""
  if: Boolean!
) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"""Exposes a URL that specifies the behavior of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behavior of this scalar."""
  url: String!
) on SCALAR

"""
A Directive provides a way to describe alternate runtime execution and type validation behavior in a GraphQL document.

In some cases, you need to provide options to alter GraphQL's execution behavior in ways field arguments will not suffice, such as conditionally including or skipping a field. Directives provide this by describing additional information to the executor.
"""
type __Directive {
  name: String!
  description: String
  isRepeatable: Boolean!
  locations: [__DirectiveLocation!]!
  args(includeDeprecated: Boolean = false): [__InputValue!]!
}

"""
A Directive can be adjacent to many parts of the GraphQL language, a __DirectiveLocation describes one such possible adjacencies.
"""
enum __DirectiveLocation {
  """Location adjacent to a query operation."""
  QUERY

  """Location adjacent to a mutation operation."""
  MUTATION

  """Location adjacent to a subscription operation."""
  SUBSCRIPTION

  """Location adjacent to a field."""
  FIELD

  """Location adjacent to a fragment definition."""
  FRAGMENT_DEFINITION

  """Location adjacent to a fragment spread."""
  FRAGMENT_SPREAD

  """Location adjacent to an inline fragment."""
  INLINE_FRAGMENT

  """Location adjacent to a variable definition."""
  VARIABLE_DEFINITION

  """Location adjacent to a schema definition."""
  SCHEMA

  """Location adjacent to a scalar definition."""
  SCALAR

  """Location adjacent to an object type definition."""
  OBJECT

  """Location adjacent to a field definition."""
  FIELD_DEFINITION

  """Location adjacent to an argument definition."""
  ARGUMENT_DEFINITION

  """Location adjacent to an interface definition."""
  INTERFACE

  """Location adjacent to a union definition."""
  UNION

  """Location adjacent to an enum definition."""
  ENUM

  """Location adjacent to an enum value definition."""
  ENUM_VALUE

  """Location adjacent to an input object type definition."""
  INPUT_OBJECT

  """Location adjacent to an input object field definition."""
  INPUT_FIELD_DEFINITION
}

"""
One possible value for a given Enum. Enum values are unique values, not a placeholder for a string or numeric value. However an Enum value is returned in a JSON response as a string.
"""
type __EnumValue {
  name: String!
  description: String
  isDeprecated: Boolean!
  deprecationReason: String
}

"""
Object and Interface types are described by a list of Fields, each of which has a name, potentially a list of arguments, and a return type.
"""
type __Field {
  name: String!
  description: String
  args(includeDeprecated: Boolean = false): [__InputValue!]!
  type: __Type!
  isDeprecated: Boolean!
  deprecationReason: String
}

"""
Arguments provided to Fields or Directives and the input fields of an InputObject are represented as Input Values which describe their type and optionally a default value.
"""
type __InputValue {
  name: String!
  description: String
  type: __Type!

  """
  A GraphQL-formatted string representing the default value for this input value.
  """
  defaultValue: String
  isDeprecated: Boolean!
  deprecationReason: String
}

"""
A GraphQL Schema defines the capabilities of a GraphQL server. It exposes all available types and directives on the server, as well as the entry points for query, mutation, and subscription operations.
"""
type __Schema {
  description: String

  """A list of all types supported by this server."""
  types: [__Type!]!

  """The type that query operations will be rooted at."""
  queryType: __Type!

  """
  If this server supports mutation, the type that mutation operations will be rooted at.
  """
  mutationType: __Type

  """
  If this server support subscription, the type that subscription operations will be rooted at.
  """
  subscriptionType: __Type

  """A list of all directives supported by this server."""
  directives: [__Directive!]!
}

"""
The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.

Depending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name, description and optional `specifiedByURL`, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types.
"""
type __Type {
  kind: __TypeKind!
  name: String
  description: String
  specifiedByURL: String
  fields(includeDeprecated: Boolean = false): [__Field!]
  interfaces: [__Type!]
  possibleTypes: [__Type!]
  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]
  inputFields(includeDeprecated: Boolean = false): [__InputValue!]
  ofType: __Type
}

"""An enum describing what kind of type a given `__Type` is."""
enum __TypeKind {
  """Indicates this type is a scalar."""
  SCALAR

  """
  Indicates this type is an object. `fields` and `interfaces` are valid fields.
  """
  OBJECT

  """
  Indicates this type is an interface. `fields`, `interfaces`, and `possibleTypes` are valid fields.
  """
  INTERFACE

  """Indicates this type is a union. `possibleTypes` is a valid field."""
  UNION

  """Indicates this type is an enum. `enumValues` is a valid field."""
  ENUM

  """
  Indicates this type is an input object. `inputFields` is a valid field.
  """
  INPUT_OBJECT

  """Indicates this type is a list. `ofType` is a valid field."""
  LIST

  """Indicates this type is a non-null. `ofType` is a valid field."""
  NON_NULL
}
schema {
  query: Query
  mutation: Mutation
}

scalar BigInt

"""
Boolean expression comparing fields on type "BigInt"
"""
input BigIntFilter {
  eq: BigInt
  gt: BigInt
  gte: BigInt
  lt: BigInt
  lte: BigInt
  neq: BigInt
}

"""
Boolean expression comparing fields on type "Boolean"
"""
input BooleanFilter {
  eq: Boolean
  gt: Boolean
  gte: Boolean
  lt: Boolean
  lte: Boolean
  neq: Boolean
}

enum CommunityStatus {
  ACTIVE
  DRAFT
  INACTIVE
}

enum CommunityUserRoles {
  ADMIN
  COLLABORATOR
  OWNER
  VOLUNTEER
}

scalar Cursor

scalar Date

"""
Boolean expression comparing fields on type "Date"
"""
input DateFilter {
  eq: Date
  gt: Date
  gte: Date
  lt: Date
  lte: Date
  neq: Date
}

scalar Datetime

"""
Boolean expression comparing fields on type "Datetime"
"""
input DatetimeFilter {
  eq: Datetime
  gt: Datetime
  gte: Datetime
  lt: Datetime
  lte: Datetime
  neq: Datetime
}

enum EventStatus {
  ACTIVE
  DRAFT
  INACTIVE
}

"""
Boolean expression comparing fields on type "Float"
"""
input FloatFilter {
  eq: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  neq: Float
}

"""
Boolean expression comparing fields on type "Int"
"""
input IntFilter {
  eq: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  neq: Int
}

scalar JSON

"""
Boolean expression comparing fields on type "JSON"
"""
input JSONFilter {
  eq: JSON
  neq: JSON
}

enum MercadolibreAllowedCurrencies {
  ARS
  BRL
  CLP
  COP
  MXN
  PEN
  UYU
}

"""The root type for creating and mutating data"""
type Mutation {
  """Deletes zero or more records from the collection"""
  deleteFromcommunitiesCollection(
    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
    """Restricts the mutation's impact to records matching the critera"""
    filter: communitiesFilter
  ): communitiesDeleteResponse!
  """Deletes zero or more records from the collection"""
  deleteFromcommunity_userCollection(
    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
    """Restricts the mutation's impact to records matching the critera"""
    filter: community_userFilter
  ): community_userDeleteResponse!
  """Deletes zero or more records from the collection"""
  deleteFromcountriesCollection(
    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
    """Restricts the mutation's impact to records matching the critera"""
    filter: countriesFilter
  ): countriesDeleteResponse!
  """Deletes zero or more records from the collection"""
  deleteFromeventsCollection(
    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
    """Restricts the mutation's impact to records matching the critera"""
    filter: eventsFilter
  ): eventsDeleteResponse!
  """Deletes zero or more records from the collection"""
  deleteFromsuper_adminsCollection(
    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
    """Restricts the mutation's impact to records matching the critera"""
    filter: super_adminsFilter
  ): super_adminsDeleteResponse!
  """Deletes zero or more records from the collection"""
  deleteFromticket_templateCollection(
    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
    """Restricts the mutation's impact to records matching the critera"""
    filter: ticket_templateFilter
  ): ticket_templateDeleteResponse!
  """Deletes zero or more records from the collection"""
  deleteFromticket_transactionsCollection(
    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
    """Restricts the mutation's impact to records matching the critera"""
    filter: ticket_transactionsFilter
  ): ticket_transactionsDeleteResponse!
  """Deletes zero or more records from the collection"""
  deleteFromtransactionsCollection(
    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
    """Restricts the mutation's impact to records matching the critera"""
    filter: transactionsFilter
  ): transactionsDeleteResponse!
  """Adds one or more `communitiesInsertResponse` records to the collection"""
  insertIntocommunitiesCollection(objects: [communitiesInsertInput!]!): communitiesInsertResponse
  """
  Adds one or more `community_userInsertResponse` records to the collection
  """
  insertIntocommunity_userCollection(objects: [community_userInsertInput!]!): community_userInsertResponse
  """Adds one or more `countriesInsertResponse` records to the collection"""
  insertIntocountriesCollection(objects: [countriesInsertInput!]!): countriesInsertResponse
  """Adds one or more `eventsInsertResponse` records to the collection"""
  insertIntoeventsCollection(objects: [eventsInsertInput!]!): eventsInsertResponse
  """
  Adds one or more `super_adminsInsertResponse` records to the collection
  """
  insertIntosuper_adminsCollection(objects: [super_adminsInsertInput!]!): super_adminsInsertResponse
  """
  Adds one or more `ticket_templateInsertResponse` records to the collection
  """
  insertIntoticket_templateCollection(objects: [ticket_templateInsertInput!]!): ticket_templateInsertResponse
  """
  Adds one or more `ticket_transactionsInsertResponse` records to the collection
  """
  insertIntoticket_transactionsCollection(objects: [ticket_transactionsInsertInput!]!): ticket_transactionsInsertResponse
  """
  Adds one or more `transactionsInsertResponse` records to the collection
  """
  insertIntotransactionsCollection(objects: [transactionsInsertInput!]!): transactionsInsertResponse
  """Updates zero or more records in the collection"""
  updatecommunitiesCollection(
    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
    """Restricts the mutation's impact to records matching the critera"""
    filter: communitiesFilter
    """
    Fields that are set will be updated for all records matching the `filter`
    """
    set: communitiesUpdateInput!
  ): communitiesUpdateResponse!
  """Updates zero or more records in the collection"""
  updatecommunity_userCollection(
    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
    """Restricts the mutation's impact to records matching the critera"""
    filter: community_userFilter
    """
    Fields that are set will be updated for all records matching the `filter`
    """
    set: community_userUpdateInput!
  ): community_userUpdateResponse!
  """Updates zero or more records in the collection"""
  updatecountriesCollection(
    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
    """Restricts the mutation's impact to records matching the critera"""
    filter: countriesFilter
    """
    Fields that are set will be updated for all records matching the `filter`
    """
    set: countriesUpdateInput!
  ): countriesUpdateResponse!
  """Updates zero or more records in the collection"""
  updateeventsCollection(
    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
    """Restricts the mutation's impact to records matching the critera"""
    filter: eventsFilter
    """
    Fields that are set will be updated for all records matching the `filter`
    """
    set: eventsUpdateInput!
  ): eventsUpdateResponse!
  """Updates zero or more records in the collection"""
  updatesuper_adminsCollection(
    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
    """Restricts the mutation's impact to records matching the critera"""
    filter: super_adminsFilter
    """
    Fields that are set will be updated for all records matching the `filter`
    """
    set: super_adminsUpdateInput!
  ): super_adminsUpdateResponse!
  """Updates zero or more records in the collection"""
  updateticket_templateCollection(
    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
    """Restricts the mutation's impact to records matching the critera"""
    filter: ticket_templateFilter
    """
    Fields that are set will be updated for all records matching the `filter`
    """
    set: ticket_templateUpdateInput!
  ): ticket_templateUpdateResponse!
  """Updates zero or more records in the collection"""
  updateticket_transactionsCollection(
    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
    """Restricts the mutation's impact to records matching the critera"""
    filter: ticket_transactionsFilter
    """
    Fields that are set will be updated for all records matching the `filter`
    """
    set: ticket_transactionsUpdateInput!
  ): ticket_transactionsUpdateResponse!
  """Updates zero or more records in the collection"""
  updatetransactionsCollection(
    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
    """Restricts the mutation's impact to records matching the critera"""
    filter: transactionsFilter
    """
    Fields that are set will be updated for all records matching the `filter`
    """
    set: transactionsUpdateInput!
  ): transactionsUpdateResponse!
}

"""Defines a per-field sorting order"""
enum OrderByDirection {
  AscNullsFirst
  AscNullsLast
  DescNullsFirst
  DescNullsLast
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

"""The root type for querying data"""
type Query {
  """A pagable collection of type `communities`"""
  communitiesCollection(
    """Query values in the collection after the provided cursor"""
    after: Cursor
    """Query values in the collection before the provided cursor"""
    before: Cursor
    """Filters to apply to the results set when querying from the collection"""
    filter: communitiesFilter
    """Query the first `n` records in the collection"""
    first: Int
    """Query the last `n` records in the collection"""
    last: Int
    """Sort order to apply to the collection"""
    orderBy: [communitiesOrderBy!]
  ): communitiesConnection
  """A pagable collection of type `community_user`"""
  community_userCollection(
    """Query values in the collection after the provided cursor"""
    after: Cursor
    """Query values in the collection before the provided cursor"""
    before: Cursor
    """Filters to apply to the results set when querying from the collection"""
    filter: community_userFilter
    """Query the first `n` records in the collection"""
    first: Int
    """Query the last `n` records in the collection"""
    last: Int
    """Sort order to apply to the collection"""
    orderBy: [community_userOrderBy!]
  ): community_userConnection
  """A pagable collection of type `countries`"""
  countriesCollection(
    """Query values in the collection after the provided cursor"""
    after: Cursor
    """Query values in the collection before the provided cursor"""
    before: Cursor
    """Filters to apply to the results set when querying from the collection"""
    filter: countriesFilter
    """Query the first `n` records in the collection"""
    first: Int
    """Query the last `n` records in the collection"""
    last: Int
    """Sort order to apply to the collection"""
    orderBy: [countriesOrderBy!]
  ): countriesConnection
  """A pagable collection of type `events`"""
  eventsCollection(
    """Query values in the collection after the provided cursor"""
    after: Cursor
    """Query values in the collection before the provided cursor"""
    before: Cursor
    """Filters to apply to the results set when querying from the collection"""
    filter: eventsFilter
    """Query the first `n` records in the collection"""
    first: Int
    """Query the last `n` records in the collection"""
    last: Int
    """Sort order to apply to the collection"""
    orderBy: [eventsOrderBy!]
  ): eventsConnection
  """A pagable collection of type `super_admins`"""
  super_adminsCollection(
    """Query values in the collection after the provided cursor"""
    after: Cursor
    """Query values in the collection before the provided cursor"""
    before: Cursor
    """Filters to apply to the results set when querying from the collection"""
    filter: super_adminsFilter
    """Query the first `n` records in the collection"""
    first: Int
    """Query the last `n` records in the collection"""
    last: Int
    """Sort order to apply to the collection"""
    orderBy: [super_adminsOrderBy!]
  ): super_adminsConnection
  """A pagable collection of type `ticket_template`"""
  ticket_templateCollection(
    """Query values in the collection after the provided cursor"""
    after: Cursor
    """Query values in the collection before the provided cursor"""
    before: Cursor
    """Filters to apply to the results set when querying from the collection"""
    filter: ticket_templateFilter
    """Query the first `n` records in the collection"""
    first: Int
    """Query the last `n` records in the collection"""
    last: Int
    """Sort order to apply to the collection"""
    orderBy: [ticket_templateOrderBy!]
  ): ticket_templateConnection
  """A pagable collection of type `ticket_transactions`"""
  ticket_transactionsCollection(
    """Query values in the collection after the provided cursor"""
    after: Cursor
    """Query values in the collection before the provided cursor"""
    before: Cursor
    """Filters to apply to the results set when querying from the collection"""
    filter: ticket_transactionsFilter
    """Query the first `n` records in the collection"""
    first: Int
    """Query the last `n` records in the collection"""
    last: Int
    """Sort order to apply to the collection"""
    orderBy: [ticket_transactionsOrderBy!]
  ): ticket_transactionsConnection
  """A pagable collection of type `transactions`"""
  transactionsCollection(
    """Query values in the collection after the provided cursor"""
    after: Cursor
    """Query values in the collection before the provided cursor"""
    before: Cursor
    """Filters to apply to the results set when querying from the collection"""
    filter: transactionsFilter
    """Query the first `n` records in the collection"""
    first: Int
    """Query the last `n` records in the collection"""
    last: Int
    """Sort order to apply to the collection"""
    orderBy: [transactionsOrderBy!]
  ): transactionsConnection
  __schema: __Schema!
  __type(name: String!): __Type
}

"""
Boolean expression comparing fields on type "String"
"""
input StringFilter {
  eq: String
  gt: String
  gte: String
  lt: String
  lte: String
  neq: String
}

enum TicketTemplateStatus {
  ACTIVE
  DRAFT
  INACTIVE
}

enum TicketTransactionStatus {
  ASSIGNED
  GENERATED
  REJECTED
}

scalar Time

"""
Boolean expression comparing fields on type "Time"
"""
input TimeFilter {
  eq: Time
  gt: Time
  gte: Time
  lt: Time
  lte: Time
  neq: Time
}

scalar UUID

"""
Boolean expression comparing fields on type "UUID"
"""
input UUIDFilter {
  eq: UUID
  neq: UUID
}

type communities {
  community_userCollection(
    """Query values in the collection after the provided cursor"""
    after: Cursor
    """Query values in the collection before the provided cursor"""
    before: Cursor
    """Filters to apply to the results set when querying from the collection"""
    filter: community_userFilter
    """Query the first `n` records in the collection"""
    first: Int
    """Query the last `n` records in the collection"""
    last: Int
    """Sort order to apply to the collection"""
    orderBy: [community_userOrderBy!]
  ): community_userConnection
  created_at: Datetime
  description: String!
  eventsCollection(
    """Query values in the collection after the provided cursor"""
    after: Cursor
    """Query values in the collection before the provided cursor"""
    before: Cursor
    """Filters to apply to the results set when querying from the collection"""
    filter: eventsFilter
    """Query the first `n` records in the collection"""
    first: Int
    """Query the last `n` records in the collection"""
    last: Int
    """Sort order to apply to the collection"""
    orderBy: [eventsOrderBy!]
  ): eventsConnection
  id: UUID!
  image: String
  name: String!
  slug: String!
  status: String!
  updated_at: Datetime!
}

type communitiesConnection {
  edges: [communitiesEdge!]!
  pageInfo: PageInfo!
}

type communitiesDeleteResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!
  """Array of records impacted by the mutation"""
  records: [communities!]!
}

type communitiesEdge {
  cursor: String!
  node: communities
}

input communitiesFilter {
  created_at: DatetimeFilter
  description: StringFilter
  id: UUIDFilter
  image: StringFilter
  name: StringFilter
  slug: StringFilter
  status: StringFilter
  updated_at: DatetimeFilter
}

input communitiesInsertInput {
  created_at: Datetime
  description: String
  id: UUID
  image: String
  name: String
  slug: String
  status: String
  updated_at: Datetime
}

type communitiesInsertResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!
  """Array of records impacted by the mutation"""
  records: [communities!]!
}

input communitiesOrderBy {
  created_at: OrderByDirection
  description: OrderByDirection
  id: OrderByDirection
  image: OrderByDirection
  name: OrderByDirection
  slug: OrderByDirection
  status: OrderByDirection
  updated_at: OrderByDirection
}

input communitiesUpdateInput {
  created_at: Datetime
  description: String
  id: UUID
  image: String
  name: String
  slug: String
  status: String
  updated_at: Datetime
}

type communitiesUpdateResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!
  """Array of records impacted by the mutation"""
  records: [communities!]!
}

type community_user {
  communities: communities
  community_id: UUID!
  created_at: Datetime
  id: UUID!
  role: String!
  updated_at: Datetime!
  user_id: UUID!
}

type community_userConnection {
  edges: [community_userEdge!]!
  pageInfo: PageInfo!
}

type community_userDeleteResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!
  """Array of records impacted by the mutation"""
  records: [community_user!]!
}

type community_userEdge {
  cursor: String!
  node: community_user
}

input community_userFilter {
  community_id: UUIDFilter
  created_at: DatetimeFilter
  id: UUIDFilter
  role: StringFilter
  updated_at: DatetimeFilter
  user_id: UUIDFilter
}

input community_userInsertInput {
  community_id: UUID
  created_at: Datetime
  id: UUID
  role: String
  updated_at: Datetime
  user_id: UUID
}

type community_userInsertResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!
  """Array of records impacted by the mutation"""
  records: [community_user!]!
}

input community_userOrderBy {
  community_id: OrderByDirection
  created_at: OrderByDirection
  id: OrderByDirection
  role: OrderByDirection
  updated_at: OrderByDirection
  user_id: OrderByDirection
}

input community_userUpdateInput {
  community_id: UUID
  created_at: Datetime
  id: UUID
  role: String
  updated_at: Datetime
  user_id: UUID
}

type community_userUpdateResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!
  """Array of records impacted by the mutation"""
  records: [community_user!]!
}

type countries {
  eventsCollection(
    """Query values in the collection after the provided cursor"""
    after: Cursor
    """Query values in the collection before the provided cursor"""
    before: Cursor
    """Filters to apply to the results set when querying from the collection"""
    filter: eventsFilter
    """Query the first `n` records in the collection"""
    first: Int
    """Query the last `n` records in the collection"""
    last: Int
    """Sort order to apply to the collection"""
    orderBy: [eventsOrderBy!]
  ): eventsConnection
  id: BigInt!
  iso2: String!
  iso3: String
  local_name: String
  name: String
}

type countriesConnection {
  edges: [countriesEdge!]!
  pageInfo: PageInfo!
}

type countriesDeleteResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!
  """Array of records impacted by the mutation"""
  records: [countries!]!
}

type countriesEdge {
  cursor: String!
  node: countries
}

input countriesFilter {
  id: BigIntFilter
  iso2: StringFilter
  iso3: StringFilter
  local_name: StringFilter
  name: StringFilter
}

input countriesInsertInput {
  iso2: String
  iso3: String
  local_name: String
  name: String
}

type countriesInsertResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!
  """Array of records impacted by the mutation"""
  records: [countries!]!
}

input countriesOrderBy {
  id: OrderByDirection
  iso2: OrderByDirection
  iso3: OrderByDirection
  local_name: OrderByDirection
  name: OrderByDirection
}

input countriesUpdateInput {
  iso2: String
  iso3: String
  local_name: String
  name: String
}

type countriesUpdateResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!
  """Array of records impacted by the mutation"""
  records: [countries!]!
}

type events {
  address: String
  city: String
  communities: communities
  community_id: UUID!
  countries: countries
  country: BigInt
  created_at: Datetime
  description: String!
  end_date: Datetime!
  id: UUID!
  image_link: String!
  map_link: String
  name: String!
  slug: String!
  start_date: Datetime!
  status: String
  ticket_templateCollection(
    """Query values in the collection after the provided cursor"""
    after: Cursor
    """Query values in the collection before the provided cursor"""
    before: Cursor
    """Filters to apply to the results set when querying from the collection"""
    filter: ticket_templateFilter
    """Query the first `n` records in the collection"""
    first: Int
    """Query the last `n` records in the collection"""
    last: Int
    """Sort order to apply to the collection"""
    orderBy: [ticket_templateOrderBy!]
  ): ticket_templateConnection
  transactionsCollection(
    """Query values in the collection after the provided cursor"""
    after: Cursor
    """Query values in the collection before the provided cursor"""
    before: Cursor
    """Filters to apply to the results set when querying from the collection"""
    filter: transactionsFilter
    """Query the first `n` records in the collection"""
    first: Int
    """Query the last `n` records in the collection"""
    last: Int
    """Sort order to apply to the collection"""
    orderBy: [transactionsOrderBy!]
  ): transactionsConnection
  updated_at: Datetime!
}

type eventsConnection {
  edges: [eventsEdge!]!
  pageInfo: PageInfo!
}

type eventsDeleteResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!
  """Array of records impacted by the mutation"""
  records: [events!]!
}

type eventsEdge {
  cursor: String!
  node: events
}

input eventsFilter {
  address: StringFilter
  city: StringFilter
  community_id: UUIDFilter
  country: BigIntFilter
  created_at: DatetimeFilter
  description: StringFilter
  end_date: DatetimeFilter
  id: UUIDFilter
  image_link: StringFilter
  map_link: StringFilter
  name: StringFilter
  slug: StringFilter
  start_date: DatetimeFilter
  status: StringFilter
  updated_at: DatetimeFilter
}

input eventsInsertInput {
  address: String
  city: String
  community_id: UUID
  country: BigInt
  created_at: Datetime
  description: String
  end_date: Datetime
  id: UUID
  image_link: String
  map_link: String
  name: String
  slug: String
  start_date: Datetime
  status: String
  updated_at: Datetime
}

type eventsInsertResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!
  """Array of records impacted by the mutation"""
  records: [events!]!
}

input eventsOrderBy {
  address: OrderByDirection
  city: OrderByDirection
  community_id: OrderByDirection
  country: OrderByDirection
  created_at: OrderByDirection
  description: OrderByDirection
  end_date: OrderByDirection
  id: OrderByDirection
  image_link: OrderByDirection
  map_link: OrderByDirection
  name: OrderByDirection
  slug: OrderByDirection
  start_date: OrderByDirection
  status: OrderByDirection
  updated_at: OrderByDirection
}

input eventsUpdateInput {
  address: String
  city: String
  community_id: UUID
  country: BigInt
  created_at: Datetime
  description: String
  end_date: Datetime
  id: UUID
  image_link: String
  map_link: String
  name: String
  slug: String
  start_date: Datetime
  status: String
  updated_at: Datetime
}

type eventsUpdateResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!
  """Array of records impacted by the mutation"""
  records: [events!]!
}

type super_admins {
  created_at: Datetime
  id: UUID!
  updated_at: Datetime!
  user_id: UUID!
}

type super_adminsConnection {
  edges: [super_adminsEdge!]!
  pageInfo: PageInfo!
}

type super_adminsDeleteResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!
  """Array of records impacted by the mutation"""
  records: [super_admins!]!
}

type super_adminsEdge {
  cursor: String!
  node: super_admins
}

input super_adminsFilter {
  created_at: DatetimeFilter
  id: UUIDFilter
  updated_at: DatetimeFilter
  user_id: UUIDFilter
}

input super_adminsInsertInput {
  created_at: Datetime
  id: UUID
  updated_at: Datetime
  user_id: UUID
}

type super_adminsInsertResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!
  """Array of records impacted by the mutation"""
  records: [super_admins!]!
}

input super_adminsOrderBy {
  created_at: OrderByDirection
  id: OrderByDirection
  updated_at: OrderByDirection
  user_id: OrderByDirection
}

input super_adminsUpdateInput {
  created_at: Datetime
  id: UUID
  updated_at: Datetime
  user_id: UUID
}

type super_adminsUpdateResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!
  """Array of records impacted by the mutation"""
  records: [super_admins!]!
}

type ticket_template {
  created_at: Datetime!
  description: String
  event_id: UUID!
  events: events
  id: UUID!
  name: String!
  price: String!
  quantity: String!
  status: String!
  ticket_transactionsCollection(
    """Query values in the collection after the provided cursor"""
    after: Cursor
    """Query values in the collection before the provided cursor"""
    before: Cursor
    """Filters to apply to the results set when querying from the collection"""
    filter: ticket_transactionsFilter
    """Query the first `n` records in the collection"""
    first: Int
    """Query the last `n` records in the collection"""
    last: Int
    """Sort order to apply to the collection"""
    orderBy: [ticket_transactionsOrderBy!]
  ): ticket_transactionsConnection
  updated_at: Datetime!
}

type ticket_templateConnection {
  edges: [ticket_templateEdge!]!
  pageInfo: PageInfo!
}

type ticket_templateDeleteResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!
  """Array of records impacted by the mutation"""
  records: [ticket_template!]!
}

type ticket_templateEdge {
  cursor: String!
  node: ticket_template
}

input ticket_templateFilter {
  created_at: DatetimeFilter
  description: StringFilter
  event_id: UUIDFilter
  id: UUIDFilter
  name: StringFilter
  price: StringFilter
  quantity: StringFilter
  status: StringFilter
  updated_at: DatetimeFilter
}

input ticket_templateInsertInput {
  created_at: Datetime
  description: String
  event_id: UUID
  id: UUID
  name: String
  price: String
  quantity: String
  status: String
  updated_at: Datetime
}

type ticket_templateInsertResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!
  """Array of records impacted by the mutation"""
  records: [ticket_template!]!
}

input ticket_templateOrderBy {
  created_at: OrderByDirection
  description: OrderByDirection
  event_id: OrderByDirection
  id: OrderByDirection
  name: OrderByDirection
  price: OrderByDirection
  quantity: OrderByDirection
  status: OrderByDirection
  updated_at: OrderByDirection
}

input ticket_templateUpdateInput {
  created_at: Datetime
  description: String
  event_id: UUID
  id: UUID
  name: String
  price: String
  quantity: String
  status: String
  updated_at: Datetime
}

type ticket_templateUpdateResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!
  """Array of records impacted by the mutation"""
  records: [ticket_template!]!
}

type ticket_transactions {
  created_at: Datetime
  id: UUID!
  status: String!
  ticket_template: ticket_template
  ticket_template_id: UUID!
  updated_at: Datetime!
  user_id: UUID!
}

type ticket_transactionsConnection {
  edges: [ticket_transactionsEdge!]!
  pageInfo: PageInfo!
}

type ticket_transactionsDeleteResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!
  """Array of records impacted by the mutation"""
  records: [ticket_transactions!]!
}

type ticket_transactionsEdge {
  cursor: String!
  node: ticket_transactions
}

input ticket_transactionsFilter {
  created_at: DatetimeFilter
  id: UUIDFilter
  status: StringFilter
  ticket_template_id: UUIDFilter
  updated_at: DatetimeFilter
  user_id: UUIDFilter
}

input ticket_transactionsInsertInput {
  created_at: Datetime
  id: UUID
  status: String
  ticket_template_id: UUID
  updated_at: Datetime
  user_id: UUID
}

type ticket_transactionsInsertResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!
  """Array of records impacted by the mutation"""
  records: [ticket_transactions!]!
}

input ticket_transactionsOrderBy {
  created_at: OrderByDirection
  id: OrderByDirection
  status: OrderByDirection
  ticket_template_id: OrderByDirection
  updated_at: OrderByDirection
  user_id: OrderByDirection
}

input ticket_transactionsUpdateInput {
  created_at: Datetime
  id: UUID
  status: String
  ticket_template_id: UUID
  updated_at: Datetime
  user_id: UUID
}

type ticket_transactionsUpdateResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!
  """Array of records impacted by the mutation"""
  records: [ticket_transactions!]!
}

type transactions {
  created_at: Datetime!
  event_id: UUID!
  events: events
  id: UUID!
  preference_json: String
  ticket_json_stringified: String!
  user_id: UUID!
}

type transactionsConnection {
  edges: [transactionsEdge!]!
  pageInfo: PageInfo!
}

type transactionsDeleteResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!
  """Array of records impacted by the mutation"""
  records: [transactions!]!
}

type transactionsEdge {
  cursor: String!
  node: transactions
}

input transactionsFilter {
  created_at: DatetimeFilter
  event_id: UUIDFilter
  id: UUIDFilter
  preference_json: StringFilter
  ticket_json_stringified: StringFilter
  user_id: UUIDFilter
}

input transactionsInsertInput {
  created_at: Datetime
  event_id: UUID
  id: UUID
  preference_json: String
  ticket_json_stringified: String
  user_id: UUID
}

type transactionsInsertResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!
  """Array of records impacted by the mutation"""
  records: [transactions!]!
}

input transactionsOrderBy {
  created_at: OrderByDirection
  event_id: OrderByDirection
  id: OrderByDirection
  preference_json: OrderByDirection
  ticket_json_stringified: OrderByDirection
  user_id: OrderByDirection
}

input transactionsUpdateInput {
  created_at: Datetime
  event_id: UUID
  id: UUID
  preference_json: String
  ticket_json_stringified: String
  user_id: UUID
}

type transactionsUpdateResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!
  """Array of records impacted by the mutation"""
  records: [transactions!]!
}